import com.android.build.gradle.api.ApkVariant
import com.mobile.config.sqlite.Stub2SqliteGenerator

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion versions.compileSdkVersion
    defaultConfig {
        applicationId "com.checkfer.orderpay"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion

        versionCode getAppVersionCode()
        versionName getAppVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        resConfigs "en"
    }

    androidExtensions {
        experimental = true
    }

    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".debug"
            testCoverageEnabled project.hasProperty('coverage')
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://www.google.com/\""
        }

        feature {
            debuggable true
            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".debug"
            matchingFallbacks = ['release']
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://www.google.com/\""
        }

        qa {
            debuggable true
            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".qa"
            matchingFallbacks = ['release']
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://www.google.com/\""
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://www.google.com/\""
        }
    }

    lintOptions {
        warningsAsErrors true
        checkDependencies true
        abortOnError false
        ignoreTestSources true
        lintConfig file("lint.xml")
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {

    implementation project(':feature-startup')
    implementation project(':core-viewmodel')
    implementation project(':core-network')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.code.gson:gson:${versions.gson}"

    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"

    implementation "androidx.arch.core:core-runtime:${versions.archRuntime}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.archLifecycleExtensions}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.archLifecycleExtensions}"

    implementation("android.arch.navigation:navigation-ui-ktx:${versions.archNavigation}") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
    implementation("android.arch.navigation:navigation-fragment-ktx:${versions.archNavigation}") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
    implementation "com.google.android.material:material:${versions.androidMaterial}"
    implementation "com.google.android.gms:play-services-vision:${versions.playServicesVision}"


    /* rxjava2 */
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxJava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxAndroid}"
    implementation("com.jakewharton.rxbinding2:rxbinding:${versions.rxBinding}") {
        exclude group: 'io.reactivex.rxjava2', module: 'rxandroid'
    }

    /* dagger2 */
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    /* okhttp */
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    /* retrofit */
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"

    /* stetho */
    debugImplementation "com.facebook.stetho:stetho:${versions.stetho}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"

    /* junit */
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.junit.platform:junit-platform-runner:${versions.junitPlatformRunner}"

    /* spek */
    testImplementation "org.jetbrains.spek:spek-api:${versions.spekApi}"
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:${versions.spekJunitPlatformEngine}"

    /* assertj */
    testImplementation "org.assertj:assertj-core:${versions.assertj}"

    /* mockito */
    testImplementation "com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}"
    testImplementation "org.mockito:mockito-inline:${versions.mockitoInline}"

    /* Espresso */
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test:runner:${versions.androidTest}"
    androidTestImplementation "androidx.test:rules:${versions.androidTest}"
}

android {
    applicationVariants.all { ApkVariant variant ->
        if (variant.buildType.name in ['feature', 'qa', 'release']) {
            // Run A Task here for everything except debug
        }
    }
}

/**
 * Task for building Sqlite Stub database.
 * All stub files are saved into sqlite Db as unique values instead of just having them as part of assets.
 */
/*task generateStubDb() {
    group "sqlite"
    def dbFileName = "stub.db"
    def stubFolderPath = "${rootProject.rootDir}/OrderPay-Stubs/stub"
    def sqlitePath = "${rootProject.buildDir}/assets/${dbFileName}"
    inputs.dir(stubFolderPath)
    outputs.file(sqlitePath)

    doLast {
        Stub2SqliteGenerator.generateSqlite(stubFolderPath, sqlitePath)
        new File("${sqlitePath}.timestamp").text = System.currentTimeMillis().toString()
    }
}*/

//project.tasks.preBuild.dependsOn("generateStubDb")